/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.gui;

/**
 *
 * @author javie
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PrincipalBg = new javax.swing.JPanel();
        tittle = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        answer = new javax.swing.JLabel();
        convertFrom = new javax.swing.JComboBox<>();
        convertTo = new javax.swing.JComboBox<>();
        convert = new javax.swing.JButton();
        toConvert = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PrincipalBg.setBackground(new java.awt.Color(255, 255, 255));

        tittle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tittle.setText("Unit Converter");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Enter the length to convert");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Unit to convert from");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Unit to convert to");

        answer.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        answer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        convertFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "millimeter", "centimeter", "meter", "kilometer", "inch", "foot", "yard", "mile" }));
        convertFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertFromActionPerformed(evt);
            }
        });

        convertTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "millimeter", "centimeter", "meter", "kilometer", "inch", "foot", "yard", "mile" }));
        convertTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertToActionPerformed(evt);
            }
        });

        convert.setText("Convert");
        convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertActionPerformed(evt);
            }
        });

        toConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toConvertActionPerformed(evt);
            }
        });

        jButton1.setText("Length");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jButton2.setText("Weight");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Temperature");
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout PrincipalBgLayout = new javax.swing.GroupLayout(PrincipalBg);
        PrincipalBg.setLayout(PrincipalBgLayout);
        PrincipalBgLayout.setHorizontalGroup(
            PrincipalBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrincipalBgLayout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addGroup(PrincipalBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PrincipalBgLayout.createSequentialGroup()
                        .addGroup(PrincipalBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(convert)
                            .addGroup(PrincipalBgLayout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PrincipalBgLayout.createSequentialGroup()
                        .addGroup(PrincipalBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tittle)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addGroup(PrincipalBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(toConvert, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(convertFrom, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(convertTo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                        .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137))))
        );
        PrincipalBgLayout.setVerticalGroup(
            PrincipalBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrincipalBgLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(PrincipalBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PrincipalBgLayout.createSequentialGroup()
                        .addComponent(tittle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PrincipalBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(toConvert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(convertFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(convertTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(convert))
                    .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(275, 275, 275))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PrincipalBg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PrincipalBg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed
        double resultedValue;
        String resultedValueS;

        String insertedValue = toConvert.getText();
        double insertedValueD = Double.parseDouble(insertedValue);

        String selectedValueConvertFrom = convertFrom.getSelectedItem().toString();

        String selectedValueConvertTo = convertTo.getSelectedItem().toString();

        if (selectedValueConvertFrom == "millimeter") {
            switch (selectedValueConvertTo) {
                case "millimeter":
                    resultedValue = insertedValueD = insertedValueD;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "centimeter":
                    resultedValue = insertedValueD / 10;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "meter":
                    resultedValue = insertedValueD / 1000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "kilometer":
                    resultedValue = insertedValueD / 1000000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "inch":
                    resultedValue = insertedValueD / 25.4;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "foot":
                    resultedValue = insertedValueD / 304.8;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "yard":
                    resultedValue = insertedValueD / 914.4;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "mile":
                    resultedValue = insertedValueD / 1609000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                default:
                    break;
            }
        } else if (selectedValueConvertFrom == "centimeter") {
            switch (selectedValueConvertTo) {
                case "centimeter":
                    resultedValue = insertedValueD = insertedValueD;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "millimeter":
                    resultedValue = insertedValueD * 10;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "meter":
                    resultedValue = insertedValueD / 100;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "kilometer":
                    resultedValue = insertedValueD / 100000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "inch":
                    resultedValue = insertedValueD / 2.54;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "foot":
                    resultedValue = insertedValueD / 30.48;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "yard":
                    resultedValue = insertedValueD / 91.44;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "mile":
                    resultedValue = insertedValueD / 160900;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                default:
                    break;
            }
        } else if (selectedValueConvertFrom == "meter") {
            switch (selectedValueConvertTo) {
                case "meter":
                    resultedValue = insertedValueD = insertedValueD;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "millimeter":
                    resultedValue = insertedValueD * 1000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "centimeter":
                    resultedValue = insertedValueD * 100;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "kilometer":
                    resultedValue = insertedValueD / 1000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "inch":
                    resultedValue = insertedValueD * 39.37;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "foot":
                    resultedValue = insertedValueD * 3.281;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "yard":
                    resultedValue = insertedValueD * 1.094;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "mile":
                    resultedValue = insertedValueD / 1609;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                default:
                    break;
            }
        } else if (selectedValueConvertFrom == "kilometer") {
            switch (selectedValueConvertTo) {
                case "kilometer":
                    resultedValue = insertedValueD = insertedValueD;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "millimeter":
                    resultedValue = insertedValueD * 1000000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "centimeter":
                    resultedValue = insertedValueD * 100000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "meter":
                    resultedValue = insertedValueD * 1000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "inch":
                    resultedValue = insertedValueD * 39370;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "foot":
                    resultedValue = insertedValueD * 3281;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "yard":
                    resultedValue = insertedValueD * 1094;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "mile":
                    resultedValue = insertedValueD / 1.609;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                default:
                    break;
            }
        } else if (selectedValueConvertFrom == "inch") {
            switch (selectedValueConvertTo) {
                case "inch":
                    resultedValue = insertedValueD = insertedValueD;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "millimeter":
                    resultedValue = insertedValueD * 25.4;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "centimeter":
                    resultedValue = insertedValueD * 2.54;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "meter":
                    resultedValue = insertedValueD / 39.37;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "kilometer":
                    resultedValue = insertedValueD / 39370;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "foot":
                    resultedValue = insertedValueD / 12;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "yard":
                    resultedValue = insertedValueD / 36;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "mile":
                    resultedValue = insertedValueD / 63360;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                default:
                    break;
            }
        } else if (selectedValueConvertFrom == "foot") {
            switch (selectedValueConvertTo) {
                case "foot":
                    resultedValue = insertedValueD = insertedValueD;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "millimeter":
                    resultedValue = insertedValueD * 304.8;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "centimeter":
                    resultedValue = insertedValueD * 30.48;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "meter":
                    resultedValue = insertedValueD / 3.281;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "kilometer":
                    resultedValue = insertedValueD / 3281;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "inch":
                    resultedValue = insertedValueD * 12;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "yard":
                    resultedValue = insertedValueD / 3;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "mile":
                    resultedValue = insertedValueD / 5280;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                default:
                    break;
            }
        } else if (selectedValueConvertFrom == "yard") {
            switch (selectedValueConvertTo) {
                case "yard":
                    resultedValue = insertedValueD = insertedValueD;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "millimeter":
                    resultedValue = insertedValueD * 914.4;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "centimeter":
                    resultedValue = insertedValueD * 91.44;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "meter":
                    resultedValue = insertedValueD / 1.094;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "kilometer":
                    resultedValue = insertedValueD / 1094;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "inch":
                    resultedValue = insertedValueD * 36;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "foot":
                    resultedValue = insertedValueD * 3;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "mile":
                    resultedValue = insertedValueD / 1760;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                default:
                    break;
            }
        } else if (selectedValueConvertFrom == "mile") {
            switch (selectedValueConvertTo) {
                case "mile":
                    resultedValue = insertedValueD = insertedValueD;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "millimeter":
                    resultedValue = insertedValueD * 1609000;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "centimeter":
                    resultedValue = insertedValueD * 160900;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "meter":
                    resultedValue = insertedValueD * 1609;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "kilometer":
                    resultedValue = insertedValueD * 1.609;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "inch":
                    resultedValue = insertedValueD * 63360;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "foot":
                    resultedValue = insertedValueD * 5280;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                case "yard":
                    resultedValue = insertedValueD * 1760;
                    resultedValueS = String.valueOf(resultedValue);
                    answer.setText(resultedValueS);
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_convertActionPerformed

    private void convertFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertFromActionPerformed

    }//GEN-LAST:event_convertFromActionPerformed

    private void convertToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertToActionPerformed

    }//GEN-LAST:event_convertToActionPerformed

    private void toConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toConvertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toConvertActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PrincipalBg;
    private javax.swing.JLabel answer;
    private javax.swing.JButton convert;
    private javax.swing.JComboBox<String> convertFrom;
    private javax.swing.JComboBox<String> convertTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel tittle;
    private javax.swing.JTextField toConvert;
    // End of variables declaration//GEN-END:variables
}
